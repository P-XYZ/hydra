" Pallet NFT Sell FixedPriceSaleList "
type NftFixedPriceSale @entity {
  tokens: [TokenId!] @derivedFrom(field: "fixedPriceListingId")
  listingId: BigInt!
  marketplaceId: BigInt!
  price: BigInt!
  paymentAsset: BigInt!
  seller: Account
}

type TokenId @entity {
  collectionId: BigInt!
  serialNumber: BigInt!
  fixedPriceListingId: NftFixedPriceSale
  status: String!
}


" All transfers "
type Transfer @entity {
  from: Account
  to: Account
  value: BigInt!
  comment: String @fulltext(query: "commentSearch")
  block: Int!
  tip: BigInt!
  timestamp: BigInt!
  insertedAt: DateTime!
}


type Account @entity {
  "Account address"
  id: ID!
  hex: String!
  balance: BigInt!
  incomingTx: [Transfer!] @derivedFrom(field: "to")
  outgoingTx: [Transfer!] @derivedFrom(field: "from")
}

" Tracks block timestamps "
type BlockTimestamp @entity {
  blockNumber: BigInt!
  timestamp: BigInt!
}

" Tracks block hooks "
type BlockHook @entity {
  blockNumber: BigInt!
  type: HookType!
  timestamp: BlockTimestamp!
}

enum HookType {
  PRE
  POST
}

type Extrinsic @entity {
  id: ID!
  hash: String!
}

interface Event @entity {
  indexInBlock: Int!
  inExtrinsic: Extrinsic
}

type TransferEvent implements Event @entity {
  id: ID!
  indexInBlock: Int!
  inExtrinsic: Extrinsic
}